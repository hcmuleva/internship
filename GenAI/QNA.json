{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-G1fZ4",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "subject",
            "id": "Prompt Template-65R9W",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-G1fZ4{œdataTypeœ:œTextInputœ,œidœ:œTextInput-G1fZ4œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-65R9W{œfieldNameœ:œsubjectœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-G1fZ4",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-G1fZ4œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-65R9W",
        "targetHandle": "{œfieldNameœ:œsubjectœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-1yeOx",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "num_questions",
            "id": "Prompt Template-65R9W",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-1yeOx{œdataTypeœ:œTextInputœ,œidœ:œTextInput-1yeOxœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-65R9W{œfieldNameœ:œnum_questionsœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-1yeOx",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-1yeOxœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-65R9W",
        "targetHandle": "{œfieldNameœ:œnum_questionsœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-bfqxJ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "difficulty_label",
            "id": "Prompt Template-65R9W",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-bfqxJ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-bfqxJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-65R9W{œfieldNameœ:œdifficulty_labelœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-bfqxJ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-bfqxJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-65R9W",
        "targetHandle": "{œfieldNameœ:œdifficulty_labelœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt Template",
            "id": "Prompt Template-65R9W",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "LanguageModelComponent-jQOdc",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__Prompt Template-65R9W{œdataTypeœ:œPrompt Templateœ,œidœ:œPrompt Template-65R9Wœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-LanguageModelComponent-jQOdc{œfieldNameœ:œinput_valueœ,œidœ:œLanguageModelComponent-jQOdcœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt Template-65R9W",
        "sourceHandle": "{œdataTypeœ:œPrompt Templateœ,œidœ:œPrompt Template-65R9Wœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "LanguageModelComponent-jQOdc",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œLanguageModelComponent-jQOdcœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "LanguageModelComponent",
            "id": "LanguageModelComponent-jQOdc",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-fsKDZ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__LanguageModelComponent-jQOdc{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-jQOdcœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TextOutput-fsKDZ{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-fsKDZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "LanguageModelComponent-jQOdc",
        "sourceHandle": "{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-jQOdcœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextOutput-fsKDZ",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-fsKDZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-ZFx6E",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "topic",
            "id": "Prompt Template-65R9W",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-ZFx6E{œdataTypeœ:œTextInputœ,œidœ:œTextInput-ZFx6Eœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-65R9W{œfieldNameœ:œtopicœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-ZFx6E",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-ZFx6Eœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-65R9W",
        "targetHandle": "{œfieldNameœ:œtopicœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-bfqxJ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "difficulty",
            "id": "Prompt Template-fmpvn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-bfqxJ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-bfqxJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-fmpvn{œfieldNameœ:œdifficultyœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-bfqxJ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-bfqxJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-fmpvn",
        "targetHandle": "{œfieldNameœ:œdifficultyœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-1yeOx",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "num_questions",
            "id": "Prompt Template-fmpvn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-1yeOx{œdataTypeœ:œTextInputœ,œidœ:œTextInput-1yeOxœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-fmpvn{œfieldNameœ:œnum_questionsœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-1yeOx",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-1yeOxœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-fmpvn",
        "targetHandle": "{œfieldNameœ:œnum_questionsœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-G1fZ4",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "subject",
            "id": "Prompt Template-fmpvn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-G1fZ4{œdataTypeœ:œTextInputœ,œidœ:œTextInput-G1fZ4œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-fmpvn{œfieldNameœ:œsubjectœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-G1fZ4",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-G1fZ4œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-fmpvn",
        "targetHandle": "{œfieldNameœ:œsubjectœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-ZFx6E",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "topic",
            "id": "Prompt Template-fmpvn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-ZFx6E{œdataTypeœ:œTextInputœ,œidœ:œTextInput-ZFx6Eœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-fmpvn{œfieldNameœ:œtopicœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-ZFx6E",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-ZFx6Eœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-fmpvn",
        "targetHandle": "{œfieldNameœ:œtopicœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-eF8eZ",
            "name": "false_result",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "question_output",
            "id": "Prompt Template-fmpvn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ConditionalRouter-eF8eZ{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-eF8eZœ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-fmpvn{œfieldNameœ:œquestion_outputœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ConditionalRouter-eF8eZ",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-eF8eZœ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-fmpvn",
        "targetHandle": "{œfieldNameœ:œquestion_outputœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "PythonREPLComponent",
            "id": "PythonREPLComponent-2yl0o",
            "name": "results",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "CustomComponent-7CHYp",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__PythonREPLComponent-2yl0o{œdataTypeœ:œPythonREPLComponentœ,œidœ:œPythonREPLComponent-2yl0oœ,œnameœ:œresultsœ,œoutput_typesœ:[œDataœ]}-CustomComponent-7CHYp{œfieldNameœ:œdataœ,œidœ:œCustomComponent-7CHYpœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "PythonREPLComponent-2yl0o",
        "sourceHandle": "{œdataTypeœ:œPythonREPLComponentœ,œidœ:œPythonREPLComponent-2yl0oœ,œnameœ:œresultsœ,œoutput_typesœ:[œDataœ]}",
        "target": "CustomComponent-7CHYp",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œCustomComponent-7CHYpœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "DataToMessageComponent",
            "id": "CustomComponent-7CHYp",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "python_code",
            "id": "PythonREPLComponent-oGIp4",
            "inputTypes": [
              "Message"
            ],
            "type": "code"
          }
        },
        "id": "xy-edge__CustomComponent-7CHYp{œdataTypeœ:œDataToMessageComponentœ,œidœ:œCustomComponent-7CHYpœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-PythonREPLComponent-oGIp4{œfieldNameœ:œpython_codeœ,œidœ:œPythonREPLComponent-oGIp4œ,œinputTypesœ:[œMessageœ],œtypeœ:œcodeœ}",
        "selected": false,
        "source": "CustomComponent-7CHYp",
        "sourceHandle": "{œdataTypeœ:œDataToMessageComponentœ,œidœ:œCustomComponent-7CHYpœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "PythonREPLComponent-oGIp4",
        "targetHandle": "{œfieldNameœ:œpython_codeœ,œidœ:œPythonREPLComponent-oGIp4œ,œinputTypesœ:[œMessageœ],œtypeœ:œcodeœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "LanguageModelComponent",
            "id": "LanguageModelComponent-k4nuc",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "python_code",
            "id": "PythonREPLComponent-2yl0o",
            "inputTypes": [
              "Message"
            ],
            "type": "code"
          }
        },
        "id": "xy-edge__LanguageModelComponent-k4nuc{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-k4nucœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-PythonREPLComponent-2yl0o{œfieldNameœ:œpython_codeœ,œidœ:œPythonREPLComponent-2yl0oœ,œinputTypesœ:[œMessageœ],œtypeœ:œcodeœ}",
        "selected": false,
        "source": "LanguageModelComponent-k4nuc",
        "sourceHandle": "{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-k4nucœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "PythonREPLComponent-2yl0o",
        "targetHandle": "{œfieldNameœ:œpython_codeœ,œidœ:œPythonREPLComponent-2yl0oœ,œinputTypesœ:[œMessageœ],œtypeœ:œcodeœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt Template",
            "id": "Prompt Template-fmpvn",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "LanguageModelComponent-k4nuc",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__Prompt Template-fmpvn{œdataTypeœ:œPrompt Templateœ,œidœ:œPrompt Template-fmpvnœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-LanguageModelComponent-k4nuc{œfieldNameœ:œinput_valueœ,œidœ:œLanguageModelComponent-k4nucœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt Template-fmpvn",
        "sourceHandle": "{œdataTypeœ:œPrompt Templateœ,œidœ:œPrompt Template-fmpvnœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "LanguageModelComponent-k4nuc",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œLanguageModelComponent-k4nucœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "PythonREPLComponent",
            "id": "PythonREPLComponent-oGIp4",
            "name": "results",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "CustomComponent-jNho1",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__PythonREPLComponent-oGIp4{œdataTypeœ:œPythonREPLComponentœ,œidœ:œPythonREPLComponent-oGIp4œ,œnameœ:œresultsœ,œoutput_typesœ:[œDataœ]}-CustomComponent-jNho1{œfieldNameœ:œdataœ,œidœ:œCustomComponent-jNho1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "PythonREPLComponent-oGIp4",
        "sourceHandle": "{œdataTypeœ:œPythonREPLComponentœ,œidœ:œPythonREPLComponent-oGIp4œ,œnameœ:œresultsœ,œoutput_typesœ:[œDataœ]}",
        "target": "CustomComponent-jNho1",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œCustomComponent-jNho1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-eF8eZ",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-ujpFk",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ConditionalRouter-eF8eZ{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-eF8eZœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-TextOutput-ujpFk{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-ujpFkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ConditionalRouter-eF8eZ",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-eF8eZœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextOutput-ujpFk",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-ujpFkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextOutput",
            "id": "TextOutput-Q2X4H",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "feedback",
            "id": "Prompt Template-fmpvn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextOutput-Q2X4H{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-Q2X4Hœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-fmpvn{œfieldNameœ:œfeedbackœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextOutput-Q2X4H",
        "sourceHandle": "{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-Q2X4Hœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-fmpvn",
        "targetHandle": "{œfieldNameœ:œfeedbackœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "data": {
          "sourceHandle": {
            "dataType": "TextOutput",
            "id": "TextOutput-REnHF",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "objective_subjective",
            "id": "Prompt Template-65R9W",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextOutput-REnHF{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-REnHFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-65R9W{œfieldNameœ:œobjective_subjectiveœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextOutput-REnHF",
        "sourceHandle": "{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-REnHFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-65R9W",
        "targetHandle": "{œfieldNameœ:œobjective_subjectiveœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-CRkQY",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "Extra",
            "id": "Prompt Template-65R9W",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-CRkQY{œdataTypeœ:œTextInputœ,œidœ:œTextInput-CRkQYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-65R9W{œfieldNameœ:œExtraœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-CRkQY",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-CRkQYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-65R9W",
        "targetHandle": "{œfieldNameœ:œExtraœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-nyvXG",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "Exam",
            "id": "Prompt Template-65R9W",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-nyvXG{œdataTypeœ:œTextInputœ,œidœ:œTextInput-nyvXGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-65R9W{œfieldNameœ:œExamœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-nyvXG",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-nyvXGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-65R9W",
        "targetHandle": "{œfieldNameœ:œExamœ,œidœ:œPrompt Template-65R9Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-CRkQY",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "Extra",
            "id": "Prompt Template-fmpvn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-CRkQY{œdataTypeœ:œTextInputœ,œidœ:œTextInput-CRkQYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-fmpvn{œfieldNameœ:œExtraœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "source": "TextInput-CRkQY",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-CRkQYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-fmpvn",
        "targetHandle": "{œfieldNameœ:œExtraœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-nyvXG",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "Exam",
            "id": "Prompt Template-fmpvn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-nyvXG{œdataTypeœ:œTextInputœ,œidœ:œTextInput-nyvXGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-fmpvn{œfieldNameœ:œExamœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "source": "TextInput-nyvXG",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-nyvXGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-fmpvn",
        "targetHandle": "{œfieldNameœ:œExamœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "data": {
          "sourceHandle": {
            "dataType": "TextOutput",
            "id": "TextOutput-REnHF",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "objective_subjective",
            "id": "Prompt Template-fmpvn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextOutput-REnHF{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-REnHFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt Template-fmpvn{œfieldNameœ:œobjective_subjectiveœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "source": "TextOutput-REnHF",
        "sourceHandle": "{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-REnHFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt Template-fmpvn",
        "targetHandle": "{œfieldNameœ:œobjective_subjectiveœ,œidœ:œPrompt Template-fmpvnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "CustomComponent-7CHYp",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Extracts a message string from API response data and outputs as a Message object.",
            "display_name": "Data to Message",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "edited": true,
            "field_order": [
              "data"
            ],
            "frozen": false,
            "icon": "message",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "group_outputs": false,
                "hidden": null,
                "method": "build_message",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\r\nfrom langflow.io import DataInput, Output\r\nfrom langflow.schema.message import Message  # Import the Message class\r\n\r\nclass DataToMessageComponent(Component):\r\n    display_name = \"Data to Message\"\r\n    description = \"Extracts a message string from API response data and outputs as a Message object.\"\r\n    documentation: str = \"https://docs.langflow.org/components-custom-components\"\r\n    icon = \"message\"\r\n    name = \"DataToMessageComponent\"\r\n\r\n    inputs = [\r\n        DataInput(\r\n            name=\"data\",\r\n            display_name=\"Data\",\r\n            info=\"API response data (dict, JSON, or text).\",\r\n            value={},\r\n            tool_mode=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Message\", name=\"message\", method=\"build_message\"),\r\n    ]\r\n\r\n    def build_message(self) -> Message:\r\n        data = self.data\r\n        # Try to extract the message from common API response structures\r\n        if isinstance(data, dict):\r\n            if \"data\" in data and \"message\" in data[\"data\"]:\r\n                msg = data[\"data\"][\"message\"]\r\n            elif \"message\" in data:\r\n                msg = data[\"message\"]\r\n            else:\r\n                msg = str(data)\r\n        else:\r\n            msg = str(data)\r\n        return Message(content=msg)  # Output as a Message object\r\n"
              },
              "data": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "API response data (dict, JSON, or text).",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": {}
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "DataToMessageComponent"
        },
        "dragging": false,
        "id": "CustomComponent-7CHYp",
        "measured": {
          "height": 181,
          "width": 320
        },
        "position": {
          "x": 5249.328318365066,
          "y": -788.401695259136
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Prompt Template-65R9W",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "subject",
                "num_questions",
                "difficulty_label",
                "topic",
                "objective_subjective",
                "Exam",
                "Extra"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt Template",
            "documentation": "https://docs.langflow.org/components-prompts",
            "edited": false,
            "error": null,
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "frozen": false,
            "full_path": null,
            "icon": "braces",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt",
                "group_outputs": false,
                "hidden": null,
                "method": "build_prompt",
                "name": "prompt",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": 0,
            "template": {
              "Exam": {
                "advanced": false,
                "display_name": "Exam",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "Exam",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "Extra": {
                "advanced": false,
                "display_name": "Extra",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "Extra",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt Template\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    documentation: str = \"https://docs.langflow.org/components-prompts\"\n    icon = \"braces\"\n    trace_type = \"prompt\"\n    name = \"Prompt Template\"\n    priority = 0  # Set priority to 0 to make it appear first\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "difficulty_label": {
                "advanced": false,
                "display_name": "difficulty_label",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "difficulty_label",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "easy"
              },
              "num_questions": {
                "advanced": false,
                "display_name": "num_questions",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "num_questions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "objective_subjective": {
                "advanced": false,
                "display_name": "objective_subjective",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "objective_subjective",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "subject": {
                "advanced": false,
                "display_name": "subject",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "subject",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "You are a question paper generator. Based on the following information, generate a question paper:\n\nSubject: {subject} \nNumber of Questions: {num_questions}\nDifficulty Level: {difficulty_label}\nTopic: {topic}\nObjective/Subjective: {objective_subjective}\nCompetitive Exam: {Exam}\nCustom: {Extra}\n\n"
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "topic": {
                "advanced": false,
                "display_name": "topic",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "topic",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt Template"
        },
        "dragging": false,
        "id": "Prompt Template-65R9W",
        "measured": {
          "height": 860,
          "width": 320
        },
        "position": {
          "x": 2783.400018656829,
          "y": 49.18052212736461
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-G1fZ4",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "input_output",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get user text inputs.",
            "display_name": "Subject",
            "documentation": "https://docs.langflow.org/components-io#text-input",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "key": "TextInput",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0022704986850629236,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get user text inputs.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-input\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Maths"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-G1fZ4",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": 1843.5321583610812,
          "y": 280.858769981321
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-bfqxJ",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get user text inputs. Only accepts: Easy, Medium, Hard.",
            "display_name": "Difficulty",
            "documentation": "https://docs.langflow.org/components-io#text-input",
            "edited": true,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "hidden": null,
                "method": "text_response",
                "name": "text",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\r\nfrom langflow.io import MultilineInput, Output\r\nfrom langflow.schema.message import Message\r\n\r\n\r\nclass TextInputComponent(TextComponent):\r\n    display_name = \"Text Input\"\r\n    description = \"Get user text inputs. Only accepts: Easy, Medium, Hard.\"\r\n    documentation: str = \"https://docs.langflow.org/components-io#text-input\"\r\n    icon = \"type\"\r\n    name = \"TextInput\"\r\n\r\n    ALLOWED_OPTIONS = [\"Easy\", \"Medium\", \"Hard\"]  # Dropdown-like options\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Difficulty Level\",\r\n            info=\"Type only: Easy, Medium, or Hard.\",\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\r\n    ]\r\n\r\n    def text_response(self) -> Message:\r\n        if self.input_value not in self.ALLOWED_OPTIONS:\r\n            return Message(\r\n                text=f\"❌ Invalid difficulty. Please enter one of: {', '.join(self.ALLOWED_OPTIONS)}\"\r\n            )\r\n        return Message(\r\n            text=self.input_value,\r\n        )\r\n\r\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Difficulty Level",
                "dynamic": false,
                "info": "Type only: Easy, Medium, or Hard.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Hard"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-bfqxJ",
        "measured": {
          "height": 219,
          "width": 320
        },
        "position": {
          "x": 1842.0642855986707,
          "y": -226.15117679560876
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-1yeOx",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "input_output",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get user text inputs.",
            "display_name": "Number of Questions",
            "documentation": "https://docs.langflow.org/components-io#text-input",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "key": "TextInput",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0022704986850629236,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get user text inputs.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-input\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "2"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-1yeOx",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": 1848.241661344534,
          "y": 26.799117193222436
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextOutput-Q2X4H",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "input_output",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Sends text output via API.",
            "display_name": "Feedback",
            "documentation": "https://docs.langflow.org/components-io#text-output",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "key": "TextOutput",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.002151957098264304,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Sends text output via API.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-output\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Text to be passed as output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextOutput"
        },
        "dragging": false,
        "id": "TextOutput-Q2X4H",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": 4640.928848703254,
          "y": 866.1924069356596
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Prompt Template-fmpvn",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "question_output",
                "feedback",
                "subject",
                "topic",
                "difficulty",
                "objective_subjective",
                "Exam",
                "Extra",
                "num_questions"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt Template",
            "documentation": "https://docs.langflow.org/components-prompts",
            "edited": false,
            "error": null,
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "frozen": false,
            "full_path": null,
            "icon": "braces",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt",
                "group_outputs": false,
                "hidden": null,
                "method": "build_prompt",
                "name": "prompt",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": 0,
            "template": {
              "Exam": {
                "advanced": false,
                "display_name": "Exam",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "Exam",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "Extra": {
                "advanced": false,
                "display_name": "Extra",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "Extra",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt Template\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    documentation: str = \"https://docs.langflow.org/components-prompts\"\n    icon = \"braces\"\n    trace_type = \"prompt\"\n    name = \"Prompt Template\"\n    priority = 0  # Set priority to 0 to make it appear first\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "difficulty": {
                "advanced": false,
                "display_name": "difficulty",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "difficulty",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "feedback": {
                "advanced": false,
                "display_name": "feedback",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "feedback",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "num_questions": {
                "advanced": false,
                "display_name": "num_questions",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "num_questions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "objective_subjective": {
                "advanced": false,
                "display_name": "objective_subjective",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "objective_subjective",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "question_output": {
                "advanced": false,
                "display_name": "question_output",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "question_output",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "subject": {
                "advanced": false,
                "display_name": "subject",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "subject",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "You are an expert in question paper generation.\n\nHere is the question paper generated:\n{question_output}\n\nThe student’s feedback for the above was:\n{feedback}\n\nPlease improve the question paper based on this feedback, keeping the format, subject ({subject}), topic ({topic}), difficulty ({difficulty}), Objective/Subjective ({objective_subjective})\nCompetitive Exam ({Exam})\nCustom ({Extra})\n and number of questions ({num_questions}) the same.\n\n\n\n"
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "topic": {
                "advanced": false,
                "display_name": "topic",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "topic",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt Template"
        },
        "dragging": false,
        "id": "Prompt Template-fmpvn",
        "measured": {
          "height": 1025,
          "width": 320
        },
        "position": {
          "x": 5587.773287216463,
          "y": 74.43866487677585
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextOutput-fsKDZ",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "input_output",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Sends text output via API.",
            "display_name": "Question Paper",
            "documentation": "https://docs.langflow.org/components-io#text-output",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "key": "TextOutput",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0026904540161865127,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Sends text output via API.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-output\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Text to be passed as output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextOutput"
        },
        "dragging": false,
        "id": "TextOutput-fsKDZ",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": 4157.358917984869,
          "y": 427.4993361036492
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "LanguageModelComponent-jQOdc",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Runs a language model given a specified provider.",
            "display_name": "Language Model",
            "documentation": "https://docs.langflow.org/components-models",
            "edited": true,
            "field_order": [
              "provider",
              "model_name",
              "api_key",
              "base_url",
              "input_value",
              "system_message",
              "stream",
              "temperature"
            ],
            "frozen": false,
            "icon": "brain-circuit",
            "last_updated": "2025-07-14T07:11:47.354Z",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {
              "keywords": [
                "model",
                "llm",
                "language model",
                "large language model"
              ]
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Model Response",
                "group_outputs": false,
                "hidden": null,
                "method": "text_response",
                "name": "text_output",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Language Model",
                "group_outputs": false,
                "hidden": null,
                "method": "build_model",
                "name": "model_output",
                "options": null,
                "required_inputs": null,
                "selected": "LanguageModel",
                "tool_mode": true,
                "types": [
                  "LanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": 0,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "No API Key Needed",
                "dynamic": false,
                "info": "Model Provider API key",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": false,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "base_url": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Ollama Base URL",
                "dynamic": false,
                "info": "Optional: Override Ollama base URL",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "base_url",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "http://localhost:11434"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\r\n\r\nfrom langchain_anthropic import ChatAnthropic\r\nfrom langchain_google_genai import ChatGoogleGenerativeAI\r\nfrom langchain_openai import ChatOpenAI\r\nfrom langchain_community.chat_models import ChatOllama  # ✅ Ollama import\r\n\r\nfrom langflow.base.models.anthropic_constants import ANTHROPIC_MODELS\r\nfrom langflow.base.models.google_generative_ai_constants import GOOGLE_GENERATIVE_AI_MODELS\r\nfrom langflow.base.models.model import LCModelComponent\r\nfrom langflow.base.models.openai_constants import OPENAI_CHAT_MODEL_NAMES, OPENAI_REASONING_MODEL_NAMES\r\nfrom langflow.field_typing import LanguageModel\r\nfrom langflow.field_typing.range_spec import RangeSpec\r\nfrom langflow.inputs.inputs import BoolInput\r\nfrom langflow.io import DropdownInput, MessageInput, MultilineInput, SecretStrInput, SliderInput\r\nfrom langflow.schema.dotdict import dotdict\r\n\r\n\r\nclass LanguageModelComponent(LCModelComponent):\r\n    display_name = \"Language Model\"\r\n    description = \"Runs a language model given a specified provider.\"\r\n    documentation: str = \"https://docs.langflow.org/components-models\"\r\n    icon = \"brain-circuit\"\r\n    category = \"models\"\r\n    priority = 0  # Set priority to 0 to make it appear first\r\n\r\n    inputs = [\r\n        DropdownInput(\r\n            name=\"provider\",\r\n            display_name=\"Model Provider\",\r\n            options=[\"OpenAI\", \"Anthropic\", \"Google\", \"Ollama\"],\r\n            value=\"OpenAI\",\r\n            info=\"Select the model provider\",\r\n            real_time_refresh=True,\r\n            options_metadata=[\r\n                {\"icon\": \"OpenAI\"},\r\n                {\"icon\": \"Anthropic\"},\r\n                {\"icon\": \"GoogleGenerativeAI\"},\r\n                {\"icon\": \"Bot\"},\r\n            ],\r\n        ),\r\n        DropdownInput(\r\n            name=\"model_name\",\r\n            display_name=\"Model Name\",\r\n            options=OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES,\r\n            value=OPENAI_CHAT_MODEL_NAMES[0],\r\n            info=\"Select the model to use\",\r\n            real_time_refresh=True,\r\n        ),\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"OpenAI API Key\",\r\n            info=\"Model Provider API key\",\r\n            required=False,\r\n            show=True,\r\n            real_time_refresh=True,\r\n        ),\r\n        MultilineInput(\r\n            name=\"base_url\",\r\n            display_name=\"Ollama Base URL\",\r\n            value=\"http://localhost:11434\",\r\n            info=\"Optional: Override Ollama base URL\",\r\n            advanced=True,\r\n        ),\r\n        MessageInput(\r\n            name=\"input_value\",\r\n            display_name=\"Input\",\r\n            info=\"The input text to send to the model\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"system_message\",\r\n            display_name=\"System Message\",\r\n            info=\"A system message that helps set the behavior of the assistant\",\r\n            advanced=False,\r\n        ),\r\n        BoolInput(\r\n            name=\"stream\",\r\n            display_name=\"Stream\",\r\n            info=\"Whether to stream the response\",\r\n            value=False,\r\n            advanced=True,\r\n        ),\r\n        SliderInput(\r\n            name=\"temperature\",\r\n            display_name=\"Temperature\",\r\n            value=0.1,\r\n            info=\"Controls randomness in responses\",\r\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    def build_model(self) -> LanguageModel:\r\n        provider = self.provider\r\n        model_name = self.model_name\r\n        temperature = self.temperature\r\n        stream = self.stream\r\n\r\n        if provider == \"OpenAI\":\r\n            if not self.api_key:\r\n                msg = \"OpenAI API key is required when using OpenAI provider\"\r\n                raise ValueError(msg)\r\n\r\n            if model_name in OPENAI_REASONING_MODEL_NAMES:\r\n                temperature = None  # Reasoning models don't support temperature\r\n\r\n            return ChatOpenAI(\r\n                model_name=model_name,\r\n                temperature=temperature,\r\n                streaming=stream,\r\n                openai_api_key=self.api_key,\r\n            )\r\n\r\n        if provider == \"Anthropic\":\r\n            if not self.api_key:\r\n                msg = \"Anthropic API key is required when using Anthropic provider\"\r\n                raise ValueError(msg)\r\n            return ChatAnthropic(\r\n                model=model_name,\r\n                temperature=temperature,\r\n                streaming=stream,\r\n                anthropic_api_key=self.api_key,\r\n            )\r\n\r\n        if provider == \"Google\":\r\n            if not self.api_key:\r\n                msg = \"Google API key is required when using Google provider\"\r\n                raise ValueError(msg)\r\n            return ChatGoogleGenerativeAI(\r\n                model=model_name,\r\n                temperature=temperature,\r\n                streaming=stream,\r\n                google_api_key=self.api_key,\r\n            )\r\n\r\n        if provider == \"Ollama\":\r\n            return ChatOllama(\r\n                model=model_name,\r\n                temperature=temperature,\r\n                streaming=stream,\r\n                base_url=self.base_url or \"http://localhost:11434\",\r\n            )\r\n\r\n        raise ValueError(f\"Unknown provider: {provider}\")\r\n\r\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\r\n        if field_name == \"provider\":\r\n            if field_value == \"OpenAI\":\r\n                build_config[\"model_name\"][\"options\"] = OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES\r\n                build_config[\"model_name\"][\"value\"] = OPENAI_CHAT_MODEL_NAMES[0]\r\n                build_config[\"api_key\"][\"display_name\"] = \"OpenAI API Key\"\r\n                build_config[\"api_key\"][\"show\"] = True\r\n            elif field_value == \"Anthropic\":\r\n                build_config[\"model_name\"][\"options\"] = ANTHROPIC_MODELS\r\n                build_config[\"model_name\"][\"value\"] = ANTHROPIC_MODELS[0]\r\n                build_config[\"api_key\"][\"display_name\"] = \"Anthropic API Key\"\r\n                build_config[\"api_key\"][\"show\"] = True\r\n            elif field_value == \"Google\":\r\n                build_config[\"model_name\"][\"options\"] = GOOGLE_GENERATIVE_AI_MODELS\r\n                build_config[\"model_name\"][\"value\"] = GOOGLE_GENERATIVE_AI_MODELS[0]\r\n                build_config[\"api_key\"][\"display_name\"] = \"Google API Key\"\r\n                build_config[\"api_key\"][\"show\"] = True\r\n            elif field_value == \"Ollama\":\r\n                build_config[\"model_name\"][\"options\"] = [\"llama3\", \"mistral\", \"codellama\", \"llama2\"]\r\n                build_config[\"model_name\"][\"value\"] = \"llama3\"\r\n                build_config[\"api_key\"][\"display_name\"] = \"No API Key Needed\"\r\n                build_config[\"api_key\"][\"show\"] = False\r\n        elif field_name == \"model_name\" and field_value.startswith(\"o1\") and self.provider == \"OpenAI\":\r\n            if \"system_message\" in build_config:\r\n                build_config[\"system_message\"][\"show\"] = False\r\n        elif field_name == \"model_name\" and not field_value.startswith(\"o1\") and \"system_message\" in build_config:\r\n            build_config[\"system_message\"][\"show\"] = True\r\n        return build_config\r\n"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input text to send to the model",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "Select the model to use",
                "name": "model_name",
                "options": [
                  "llama3",
                  "mistral",
                  "codellama",
                  "llama2"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "llama3"
              },
              "provider": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "Select the model provider",
                "name": "provider",
                "options": [
                  "OpenAI",
                  "Anthropic",
                  "Google",
                  "Ollama"
                ],
                "options_metadata": [
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Bot"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ollama"
              },
              "stream": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "info": "Whether to stream the response",
                "list": false,
                "list_add_label": "Add More",
                "name": "stream",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "A system message that helps set the behavior of the assistant",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "Controls randomness in responses",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              }
            },
            "tool_mode": false
          },
          "selected_output": "text_output",
          "showNode": true,
          "type": "LanguageModelComponent"
        },
        "dragging": false,
        "id": "LanguageModelComponent-jQOdc",
        "measured": {
          "height": 450,
          "width": 320
        },
        "position": {
          "x": 3552.14996868925,
          "y": 291.4640492415186
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-ZFx6E",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get user text inputs.",
            "display_name": "Topic",
            "documentation": "https://docs.langflow.org/components-io#text-input",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get user text inputs.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-input\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Profit and Loss"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-ZFx6E",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": 1837.0051886282956,
          "y": 571.0048303746526
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "LanguageModelComponent-k4nuc",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Runs a language model given a specified provider.",
            "display_name": "Language Model",
            "documentation": "https://docs.langflow.org/components-models",
            "edited": true,
            "field_order": [
              "provider",
              "model_name",
              "api_key",
              "base_url",
              "input_value",
              "system_message",
              "stream",
              "temperature"
            ],
            "frozen": false,
            "icon": "brain-circuit",
            "last_updated": "2025-07-22T18:23:28.107Z",
            "legacy": false,
            "metadata": {
              "keywords": [
                "model",
                "llm",
                "language model",
                "large language model"
              ]
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Model Response",
                "group_outputs": false,
                "hidden": null,
                "method": "text_response",
                "name": "text_output",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Language Model",
                "group_outputs": false,
                "hidden": null,
                "method": "build_model",
                "name": "model_output",
                "options": null,
                "required_inputs": null,
                "selected": "LanguageModel",
                "tool_mode": true,
                "types": [
                  "LanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": 0,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "No API Key Needed",
                "dynamic": false,
                "info": "Model Provider API key",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": false,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "base_url": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Ollama Base URL",
                "dynamic": false,
                "info": "Optional: Override Ollama base URL",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "base_url",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "http://localhost:11434"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\r\n\r\nfrom langchain_anthropic import ChatAnthropic\r\nfrom langchain_google_genai import ChatGoogleGenerativeAI\r\nfrom langchain_openai import ChatOpenAI\r\nfrom langchain_community.chat_models import ChatOllama  # ✅ Ollama import\r\n\r\nfrom langflow.base.models.anthropic_constants import ANTHROPIC_MODELS\r\nfrom langflow.base.models.google_generative_ai_constants import GOOGLE_GENERATIVE_AI_MODELS\r\nfrom langflow.base.models.model import LCModelComponent\r\nfrom langflow.base.models.openai_constants import OPENAI_CHAT_MODEL_NAMES, OPENAI_REASONING_MODEL_NAMES\r\nfrom langflow.field_typing import LanguageModel\r\nfrom langflow.field_typing.range_spec import RangeSpec\r\nfrom langflow.inputs.inputs import BoolInput\r\nfrom langflow.io import DropdownInput, MessageInput, MultilineInput, SecretStrInput, SliderInput\r\nfrom langflow.schema.dotdict import dotdict\r\n\r\n\r\nclass LanguageModelComponent(LCModelComponent):\r\n    display_name = \"Language Model\"\r\n    description = \"Runs a language model given a specified provider.\"\r\n    documentation: str = \"https://docs.langflow.org/components-models\"\r\n    icon = \"brain-circuit\"\r\n    category = \"models\"\r\n    priority = 0  # Set priority to 0 to make it appear first\r\n\r\n    inputs = [\r\n        DropdownInput(\r\n            name=\"provider\",\r\n            display_name=\"Model Provider\",\r\n            options=[\"OpenAI\", \"Anthropic\", \"Google\", \"Ollama\"],\r\n            value=\"OpenAI\",\r\n            info=\"Select the model provider\",\r\n            real_time_refresh=True,\r\n            options_metadata=[\r\n                {\"icon\": \"OpenAI\"},\r\n                {\"icon\": \"Anthropic\"},\r\n                {\"icon\": \"GoogleGenerativeAI\"},\r\n                {\"icon\": \"Bot\"},\r\n            ],\r\n        ),\r\n        DropdownInput(\r\n            name=\"model_name\",\r\n            display_name=\"Model Name\",\r\n            options=OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES,\r\n            value=OPENAI_CHAT_MODEL_NAMES[0],\r\n            info=\"Select the model to use\",\r\n            real_time_refresh=True,\r\n        ),\r\n        SecretStrInput(\r\n            name=\"api_key\",\r\n            display_name=\"OpenAI API Key\",\r\n            info=\"Model Provider API key\",\r\n            required=False,\r\n            show=True,\r\n            real_time_refresh=True,\r\n        ),\r\n        MultilineInput(\r\n            name=\"base_url\",\r\n            display_name=\"Ollama Base URL\",\r\n            value=\"http://localhost:11434\",\r\n            info=\"Optional: Override Ollama base URL\",\r\n            advanced=True,\r\n        ),\r\n        MessageInput(\r\n            name=\"input_value\",\r\n            display_name=\"Input\",\r\n            info=\"The input text to send to the model\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"system_message\",\r\n            display_name=\"System Message\",\r\n            info=\"A system message that helps set the behavior of the assistant\",\r\n            advanced=False,\r\n        ),\r\n        BoolInput(\r\n            name=\"stream\",\r\n            display_name=\"Stream\",\r\n            info=\"Whether to stream the response\",\r\n            value=False,\r\n            advanced=True,\r\n        ),\r\n        SliderInput(\r\n            name=\"temperature\",\r\n            display_name=\"Temperature\",\r\n            value=0.1,\r\n            info=\"Controls randomness in responses\",\r\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    def build_model(self) -> LanguageModel:\r\n        provider = self.provider\r\n        model_name = self.model_name\r\n        temperature = self.temperature\r\n        stream = self.stream\r\n\r\n        if provider == \"OpenAI\":\r\n            if not self.api_key:\r\n                msg = \"OpenAI API key is required when using OpenAI provider\"\r\n                raise ValueError(msg)\r\n\r\n            if model_name in OPENAI_REASONING_MODEL_NAMES:\r\n                temperature = None  # Reasoning models don't support temperature\r\n\r\n            return ChatOpenAI(\r\n                model_name=model_name,\r\n                temperature=temperature,\r\n                streaming=stream,\r\n                openai_api_key=self.api_key,\r\n            )\r\n\r\n        if provider == \"Anthropic\":\r\n            if not self.api_key:\r\n                msg = \"Anthropic API key is required when using Anthropic provider\"\r\n                raise ValueError(msg)\r\n            return ChatAnthropic(\r\n                model=model_name,\r\n                temperature=temperature,\r\n                streaming=stream,\r\n                anthropic_api_key=self.api_key,\r\n            )\r\n\r\n        if provider == \"Google\":\r\n            if not self.api_key:\r\n                msg = \"Google API key is required when using Google provider\"\r\n                raise ValueError(msg)\r\n            return ChatGoogleGenerativeAI(\r\n                model=model_name,\r\n                temperature=temperature,\r\n                streaming=stream,\r\n                google_api_key=self.api_key,\r\n            )\r\n\r\n        if provider == \"Ollama\":\r\n            return ChatOllama(\r\n                model=model_name,\r\n                temperature=temperature,\r\n                streaming=stream,\r\n                base_url=self.base_url or \"http://localhost:11434\",\r\n            )\r\n\r\n        raise ValueError(f\"Unknown provider: {provider}\")\r\n\r\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\r\n        if field_name == \"provider\":\r\n            if field_value == \"OpenAI\":\r\n                build_config[\"model_name\"][\"options\"] = OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES\r\n                build_config[\"model_name\"][\"value\"] = OPENAI_CHAT_MODEL_NAMES[0]\r\n                build_config[\"api_key\"][\"display_name\"] = \"OpenAI API Key\"\r\n                build_config[\"api_key\"][\"show\"] = True\r\n            elif field_value == \"Anthropic\":\r\n                build_config[\"model_name\"][\"options\"] = ANTHROPIC_MODELS\r\n                build_config[\"model_name\"][\"value\"] = ANTHROPIC_MODELS[0]\r\n                build_config[\"api_key\"][\"display_name\"] = \"Anthropic API Key\"\r\n                build_config[\"api_key\"][\"show\"] = True\r\n            elif field_value == \"Google\":\r\n                build_config[\"model_name\"][\"options\"] = GOOGLE_GENERATIVE_AI_MODELS\r\n                build_config[\"model_name\"][\"value\"] = GOOGLE_GENERATIVE_AI_MODELS[0]\r\n                build_config[\"api_key\"][\"display_name\"] = \"Google API Key\"\r\n                build_config[\"api_key\"][\"show\"] = True\r\n            elif field_value == \"Ollama\":\r\n                build_config[\"model_name\"][\"options\"] = [\"llama3\", \"mistral\", \"codellama\", \"llama2\"]\r\n                build_config[\"model_name\"][\"value\"] = \"llama3\"\r\n                build_config[\"api_key\"][\"display_name\"] = \"No API Key Needed\"\r\n                build_config[\"api_key\"][\"show\"] = False\r\n        elif field_name == \"model_name\" and field_value.startswith(\"o1\") and self.provider == \"OpenAI\":\r\n            if \"system_message\" in build_config:\r\n                build_config[\"system_message\"][\"show\"] = False\r\n        elif field_name == \"model_name\" and not field_value.startswith(\"o1\") and \"system_message\" in build_config:\r\n            build_config[\"system_message\"][\"show\"] = True\r\n        return build_config\r\n"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input text to send to the model",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "Select the model to use",
                "name": "model_name",
                "options": [
                  "llama3",
                  "mistral",
                  "codellama",
                  "llama2"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "llama3"
              },
              "provider": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "Select the model provider",
                "name": "provider",
                "options": [
                  "OpenAI",
                  "Anthropic",
                  "Google",
                  "Ollama"
                ],
                "options_metadata": [
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Bot"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ollama"
              },
              "stream": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "info": "Whether to stream the response",
                "list": false,
                "list_add_label": "Add More",
                "name": "stream",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "A system message that helps set the behavior of the assistant",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "Controls randomness in responses",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              }
            },
            "tool_mode": false
          },
          "selected_output": "text_output",
          "showNode": true,
          "type": "LanguageModelComponent"
        },
        "dragging": false,
        "id": "LanguageModelComponent-k4nuc",
        "measured": {
          "height": 450,
          "width": 320
        },
        "position": {
          "x": 6183.291710741547,
          "y": 634.3930607951521
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ConditionalRouter-eF8eZ",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "display_name": "If-Else",
            "documentation": "https://docs.langflow.org/components-logic#conditional-router-if-else-component",
            "edited": true,
            "field_order": [
              "input_text",
              "operator",
              "match_text",
              "case_sensitive",
              "true_case_message",
              "false_case_message",
              "max_iterations",
              "default_route"
            ],
            "frozen": false,
            "icon": "split",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "True",
                "group_outputs": true,
                "hidden": null,
                "method": "true_response",
                "name": "true_result",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "False",
                "group_outputs": true,
                "hidden": null,
                "method": "false_response",
                "name": "false_result",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Case Sensitive",
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "list": false,
                "list_add_label": "Add More",
                "name": "case_sensitive",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import re\r\n\r\nfrom langflow.custom.custom_component.component import Component\r\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageInput, MessageTextInput, Output\r\nfrom langflow.schema.message import Message\r\n\r\n\r\nclass ConditionalRouterComponent(Component):\r\n    display_name = \"If-Else\"\r\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\r\n    documentation: str = \"https://docs.langflow.org/components-logic#conditional-router-if-else-component\"\r\n    icon = \"split\"\r\n    name = \"ConditionalRouter\"\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.__iteration_updated = False\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"input_text\",\r\n            display_name=\"Text Input\",\r\n            info=\"The primary text input for the operation.\",\r\n            required=True,\r\n        ),\r\n        DropdownInput(\r\n            name=\"operator\",\r\n            display_name=\"Operator\",\r\n            options=[\r\n                \"equals\",\r\n                \"not equals\",\r\n                \"contains\",\r\n                \"starts with\",\r\n                \"ends with\",\r\n                \"regex\",\r\n                \"less than\",\r\n                \"less than or equal\",\r\n                \"greater than\",\r\n                \"greater than or equal\",\r\n            ],\r\n            info=\"The operator to apply for comparing the texts.\",\r\n            value=\"equals\",\r\n            real_time_refresh=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"match_text\",\r\n            display_name=\"Match Text\",\r\n            info=\"The text input to compare against.\",\r\n            required=True,\r\n        ),\r\n        BoolInput(\r\n            name=\"case_sensitive\",\r\n            display_name=\"Case Sensitive\",\r\n            info=\"If true, the comparison will be case sensitive.\",\r\n            value=True,\r\n            advanced=True,\r\n        ),\r\n        MessageInput(\r\n            name=\"true_case_message\",\r\n            display_name=\"Case True\",\r\n            info=\"The message to pass if the condition is True.\",\r\n            advanced=True,\r\n        ),\r\n        MessageInput(\r\n            name=\"false_case_message\",\r\n            display_name=\"Case False\",\r\n            info=\"The message to pass if the condition is False.\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"max_iterations\",\r\n            display_name=\"Max Iterations\",\r\n            info=\"The maximum number of iterations for the conditional router.\",\r\n            value=10,\r\n            advanced=True,\r\n        ),\r\n        DropdownInput(\r\n            name=\"default_route\",\r\n            display_name=\"Default Route\",\r\n            options=[\"true_result\", \"false_result\"],\r\n            info=\"The default route to take when max iterations are reached.\",\r\n            value=\"false_result\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"True\", name=\"true_result\", method=\"true_response\", group_outputs=True),\r\n        Output(display_name=\"False\", name=\"false_result\", method=\"false_response\", group_outputs=True),\r\n    ]\r\n\r\n    def _pre_run_setup(self):\r\n        self.__iteration_updated = False\r\n\r\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, *, case_sensitive: bool) -> bool:\r\n        if not case_sensitive and operator != \"regex\":\r\n            input_text = input_text.lower()\r\n            match_text = match_text.lower()\r\n\r\n        if operator == \"equals\":\r\n            return input_text == match_text\r\n        if operator == \"not equals\":\r\n            return input_text != match_text\r\n        if operator == \"contains\":\r\n            return match_text in input_text\r\n        if operator == \"starts with\":\r\n            return input_text.startswith(match_text)\r\n        if operator == \"ends with\":\r\n            return input_text.endswith(match_text)\r\n        if operator == \"regex\":\r\n            try:\r\n                return bool(re.match(match_text, input_text))\r\n            except re.error:\r\n                return False  # Return False if the regex is invalid\r\n        if operator in [\"less than\", \"less than or equal\", \"greater than\", \"greater than or equal\"]:\r\n            try:\r\n                input_num = float(input_text)\r\n                match_num = float(match_text)\r\n                if operator == \"less than\":\r\n                    return input_num < match_num\r\n                if operator == \"less than or equal\":\r\n                    return input_num <= match_num\r\n                if operator == \"greater than\":\r\n                    return input_num > match_num\r\n                if operator == \"greater than or equal\":\r\n                    return input_num >= match_num\r\n            except ValueError:\r\n                return False  # Invalid number format for comparison\r\n        return False\r\n\r\n    def iterate_and_stop_once(self, route_to_stop: str):\r\n        if not self.__iteration_updated:\r\n            self.update_ctx({f\"{self._id}_iteration\": self.ctx.get(f\"{self._id}_iteration\", 0) + 1})\r\n            self.__iteration_updated = True\r\n            if self.ctx.get(f\"{self._id}_iteration\", 0) >= self.max_iterations and route_to_stop == self.default_route:\r\n                route_to_stop = \"true_result\" if route_to_stop == \"false_result\" else \"false_result\"\r\n            self.stop(route_to_stop)\r\n\r\n    def true_response(self) -> Message:\r\n        result = self.evaluate_condition(\r\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\r\n        )\r\n        if result:\r\n            self.status = self.true_case_message\r\n            self.iterate_and_stop_once(\"false_result\")\r\n            return self.true_case_message\r\n        self.iterate_and_stop_once(\"true_result\")\r\n        return Message(content=\"\")\r\n\r\n    def false_response(self) -> Message:\r\n        result = self.evaluate_condition(\r\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\r\n        )\r\n        if not result:\r\n            self.status = self.false_case_message\r\n            self.iterate_and_stop_once(\"true_result\")\r\n            return self.false_case_message\r\n        self.iterate_and_stop_once(\"false_result\")\r\n        return Message(content=\"\")\r\n\r\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\r\n        if field_name == \"operator\":\r\n            if field_value == \"regex\":\r\n                build_config.pop(\"case_sensitive\", None)\r\n            elif \"case_sensitive\" not in build_config:\r\n                case_sensitive_input = next(\r\n                    (input_field for input_field in self.inputs if input_field.name == \"case_sensitive\"), None\r\n                )\r\n                if case_sensitive_input:\r\n                    build_config[\"case_sensitive\"] = case_sensitive_input.to_dict()\r\n        return build_config\r\n"
              },
              "default_route": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Default Route",
                "dynamic": false,
                "info": "The default route to take when max iterations are reached.",
                "name": "default_route",
                "options": [
                  "true_result",
                  "false_result"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "false_result"
              },
              "false_case_message": {
                "_input_type": "MessageInput",
                "advanced": true,
                "display_name": "Case False",
                "dynamic": false,
                "info": "The message to pass if the condition is False.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "false_case_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "input_text": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text Input",
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_text",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "match_text": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Match Text",
                "dynamic": false,
                "info": "The text input to compare against.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "match_text",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "end"
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of iterations for the conditional router.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 10
              },
              "operator": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Operator",
                "dynamic": false,
                "info": "The operator to apply for comparing the texts.",
                "name": "operator",
                "options": [
                  "equals",
                  "not equals",
                  "contains",
                  "starts with",
                  "ends with",
                  "regex",
                  "less than",
                  "less than or equal",
                  "greater than",
                  "greater than or equal"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "equals"
              },
              "true_case_message": {
                "_input_type": "MessageInput",
                "advanced": true,
                "display_name": "Case True",
                "dynamic": false,
                "info": "The message to pass if the condition is True.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "true_case_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ConditionalRouter"
        },
        "dragging": false,
        "id": "ConditionalRouter-eF8eZ",
        "measured": {
          "height": 428,
          "width": 320
        },
        "position": {
          "x": 6665.095645797623,
          "y": -608.6791561364363
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "PythonREPLComponent-oGIp4",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "category": "processing",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Run Python code with optional imports. Use print() to see the output.",
            "display_name": "CheckFeedbackLoop",
            "documentation": "https://docs.langflow.org/components-processing#python-interpreter",
            "edited": false,
            "field_order": [
              "global_imports",
              "python_code"
            ],
            "frozen": false,
            "icon": "square-terminal",
            "key": "PythonREPLComponent",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Results",
                "group_outputs": false,
                "method": "run_python_repl",
                "name": "results",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0029853505685675905,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import importlib\n\nfrom langchain_experimental.utilities import PythonREPL\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import CodeInput, Output, StrInput\nfrom langflow.schema.data import Data\n\n\nclass PythonREPLComponent(Component):\n    display_name = \"Python Interpreter\"\n    description = \"Run Python code with optional imports. Use print() to see the output.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#python-interpreter\"\n    icon = \"square-terminal\"\n\n    inputs = [\n        StrInput(\n            name=\"global_imports\",\n            display_name=\"Global Imports\",\n            info=\"A comma-separated list of modules to import globally, e.g. 'math,numpy,pandas'.\",\n            value=\"math,pandas\",\n            required=True,\n        ),\n        CodeInput(\n            name=\"python_code\",\n            display_name=\"Python Code\",\n            info=\"The Python code to execute. Only modules specified in Global Imports can be used.\",\n            value=\"print('Hello, World!')\",\n            input_types=[\"Message\"],\n            tool_mode=True,\n            required=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Results\",\n            name=\"results\",\n            type_=Data,\n            method=\"run_python_repl\",\n        ),\n    ]\n\n    def get_globals(self, global_imports: str | list[str]) -> dict:\n        \"\"\"Create a globals dictionary with only the specified allowed imports.\"\"\"\n        global_dict = {}\n\n        try:\n            if isinstance(global_imports, str):\n                modules = [module.strip() for module in global_imports.split(\",\")]\n            elif isinstance(global_imports, list):\n                modules = global_imports\n            else:\n                msg = \"global_imports must be either a string or a list\"\n                raise TypeError(msg)\n\n            for module in modules:\n                try:\n                    imported_module = importlib.import_module(module)\n                    global_dict[imported_module.__name__] = imported_module\n                except ImportError as e:\n                    msg = f\"Could not import module {module}: {e!s}\"\n                    raise ImportError(msg) from e\n\n        except Exception as e:\n            self.log(f\"Error in global imports: {e!s}\")\n            raise\n        else:\n            self.log(f\"Successfully imported modules: {list(global_dict.keys())}\")\n            return global_dict\n\n    def run_python_repl(self) -> Data:\n        try:\n            globals_ = self.get_globals(self.global_imports)\n            python_repl = PythonREPL(_globals=globals_)\n            result = python_repl.run(self.python_code)\n            result = result.strip() if result else \"\"\n\n            self.log(\"Code execution completed successfully\")\n            return Data(data={\"result\": result})\n\n        except ImportError as e:\n            error_message = f\"Import Error: {e!s}\"\n            self.log(error_message)\n            return Data(data={\"error\": error_message})\n\n        except SyntaxError as e:\n            error_message = f\"Syntax Error: {e!s}\"\n            self.log(error_message)\n            return Data(data={\"error\": error_message})\n\n        except (NameError, TypeError, ValueError) as e:\n            error_message = f\"Error during execution: {e!s}\"\n            self.log(error_message)\n            return Data(data={\"error\": error_message})\n\n    def build(self):\n        return self.run_python_repl\n"
              },
              "global_imports": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Global Imports",
                "dynamic": false,
                "info": "A comma-separated list of modules to import globally, e.g. 'math,numpy,pandas'.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "global_imports",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "math,pandas"
              },
              "python_code": {
                "_input_type": "CodeInput",
                "advanced": false,
                "display_name": "Python Code",
                "dynamic": false,
                "info": "The Python code to execute. Only modules specified in Global Imports can be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "python_code",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "type": "code",
                "value": "import json\r\nfrom datetime import datetime\r\n\r\n# Get values from flow_vars\r\ndifficulty = flow_vars.get(\"difficulty\", \"unknown\")\r\nsubject = flow_vars.get(\"subject\", \"unknown\")\r\ntopic = flow_vars.get(\"topic\", \"unknown\")\r\nnum_questions = flow_vars.get(\"num_questions\", \"unknown\")\r\ngenerated_output = flow_vars.get(\"original_output\", \"\")\r\nimproved_output = flow_vars.get(\"improved_output\", \"\")\r\nfeedback = flow_vars.get(\"feedback\", inputs[0]).lower()\r\n\r\n# Save feedback log\r\ndata = {\r\n    \"timestamp\": str(datetime.now()),\r\n    \"difficulty\": difficulty,\r\n    \"subject\": subject,\r\n    \"topic\": topic,\r\n    \"num_questions\": num_questions,\r\n    \"generated_output\": generated_output,\r\n    \"feedback\": feedback,\r\n    \"improved_output\": improved_output,\r\n    \"loop\": flow_vars.get(\"loop_count\", 1)\r\n}\r\n\r\nwith open(\"/mnt/data/qa_feedback_log.json\", \"a\") as f:\r\n    f.write(json.dumps(data) + \"\\n\")\r\n\r\n# Update loop count\r\nflow_vars[\"loop_count\"] = flow_vars.get(\"loop_count\", 0) + 1\r\n\r\n# Decide whether to stop or regenerate\r\nif \"good\" in feedback or \"okay\" in feedback or \"satisfied\" in feedback:\r\n    return \"end\"\r\nelif flow_vars[\"loop_count\"] >= 3:\r\n    return \"end\"\r\nelse:\r\n    return \"regenerate\"\r\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "PythonREPLComponent"
        },
        "dragging": false,
        "id": "PythonREPLComponent-oGIp4",
        "measured": {
          "height": 308,
          "width": 320
        },
        "position": {
          "x": 5557.145594452875,
          "y": -416.644833635348
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextOutput-ujpFk",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Sends text output via API.",
            "display_name": "Text Output",
            "documentation": "https://docs.langflow.org/components-io#text-output",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Sends text output via API.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-output\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Text to be passed as output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextOutput"
        },
        "dragging": false,
        "id": "TextOutput-ujpFk",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": 7114.1555976598875,
          "y": -623.2878523747828
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "PythonREPLComponent-2yl0o",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "category": "processing",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Run Python code with optional imports. Use print() to see the output.",
            "display_name": "Python Interpreter",
            "documentation": "https://docs.langflow.org/components-processing#python-interpreter",
            "edited": false,
            "field_order": [
              "global_imports",
              "python_code"
            ],
            "frozen": false,
            "icon": "square-terminal",
            "key": "PythonREPLComponent",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Results",
                "group_outputs": false,
                "method": "run_python_repl",
                "name": "results",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0029853505685675905,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import importlib\n\nfrom langchain_experimental.utilities import PythonREPL\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import CodeInput, Output, StrInput\nfrom langflow.schema.data import Data\n\n\nclass PythonREPLComponent(Component):\n    display_name = \"Python Interpreter\"\n    description = \"Run Python code with optional imports. Use print() to see the output.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#python-interpreter\"\n    icon = \"square-terminal\"\n\n    inputs = [\n        StrInput(\n            name=\"global_imports\",\n            display_name=\"Global Imports\",\n            info=\"A comma-separated list of modules to import globally, e.g. 'math,numpy,pandas'.\",\n            value=\"math,pandas\",\n            required=True,\n        ),\n        CodeInput(\n            name=\"python_code\",\n            display_name=\"Python Code\",\n            info=\"The Python code to execute. Only modules specified in Global Imports can be used.\",\n            value=\"print('Hello, World!')\",\n            input_types=[\"Message\"],\n            tool_mode=True,\n            required=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Results\",\n            name=\"results\",\n            type_=Data,\n            method=\"run_python_repl\",\n        ),\n    ]\n\n    def get_globals(self, global_imports: str | list[str]) -> dict:\n        \"\"\"Create a globals dictionary with only the specified allowed imports.\"\"\"\n        global_dict = {}\n\n        try:\n            if isinstance(global_imports, str):\n                modules = [module.strip() for module in global_imports.split(\",\")]\n            elif isinstance(global_imports, list):\n                modules = global_imports\n            else:\n                msg = \"global_imports must be either a string or a list\"\n                raise TypeError(msg)\n\n            for module in modules:\n                try:\n                    imported_module = importlib.import_module(module)\n                    global_dict[imported_module.__name__] = imported_module\n                except ImportError as e:\n                    msg = f\"Could not import module {module}: {e!s}\"\n                    raise ImportError(msg) from e\n\n        except Exception as e:\n            self.log(f\"Error in global imports: {e!s}\")\n            raise\n        else:\n            self.log(f\"Successfully imported modules: {list(global_dict.keys())}\")\n            return global_dict\n\n    def run_python_repl(self) -> Data:\n        try:\n            globals_ = self.get_globals(self.global_imports)\n            python_repl = PythonREPL(_globals=globals_)\n            result = python_repl.run(self.python_code)\n            result = result.strip() if result else \"\"\n\n            self.log(\"Code execution completed successfully\")\n            return Data(data={\"result\": result})\n\n        except ImportError as e:\n            error_message = f\"Import Error: {e!s}\"\n            self.log(error_message)\n            return Data(data={\"error\": error_message})\n\n        except SyntaxError as e:\n            error_message = f\"Syntax Error: {e!s}\"\n            self.log(error_message)\n            return Data(data={\"error\": error_message})\n\n        except (NameError, TypeError, ValueError) as e:\n            error_message = f\"Error during execution: {e!s}\"\n            self.log(error_message)\n            return Data(data={\"error\": error_message})\n\n    def build(self):\n        return self.run_python_repl\n"
              },
              "global_imports": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Global Imports",
                "dynamic": false,
                "info": "A comma-separated list of modules to import globally, e.g. 'math,numpy,pandas'.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "global_imports",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "math,pandas"
              },
              "python_code": {
                "_input_type": "CodeInput",
                "advanced": false,
                "display_name": "Python Code",
                "dynamic": false,
                "info": "The Python code to execute. Only modules specified in Global Imports can be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "python_code",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "type": "code",
                "value": "import re\n\noutput = inputs[0]\n\n# Use regex to extract the Improved and Feedback sections\nimproved_match = re.search(r\"Improved:\\s*(.*)\", output, re.DOTALL)\nfeedback_match = re.search(r\"Feedback:\\s*(.*)\", output)\n\nflow_vars[\"improved_output\"] = improved_match.group(1).strip() if improved_match else \"\"\nflow_vars[\"feedback\"] = feedback_match.group(1).strip().lower() if feedback_match else \"\"\n\n# Return the feedback string so it can be passed into CheckFeedbackLoop\nreturn flow_vars[\"feedback\"]"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "PythonREPLComponent"
        },
        "dragging": false,
        "id": "PythonREPLComponent-2yl0o",
        "measured": {
          "height": 308,
          "width": 320
        },
        "position": {
          "x": 4953.105580741202,
          "y": -423.63698227676593
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomComponent-jNho1",
          "node": {
            "base_classes": [
              "Text"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Extracts a text string from API response data.",
            "display_name": "Data to Text",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "edited": true,
            "field_order": [
              "data"
            ],
            "frozen": false,
            "icon": "message",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Text",
                "group_outputs": false,
                "hidden": null,
                "method": "extract_text",
                "name": "text",
                "options": null,
                "required_inputs": null,
                "selected": "Text",
                "tool_mode": true,
                "types": [
                  "Text"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\r\nfrom langflow.io import DataInput, Output\r\n\r\nclass DataToTextComponent(Component):\r\n    display_name = \"Data to Text\"\r\n    description = \"Extracts a text string from API response data.\"\r\n    documentation: str = \"https://docs.langflow.org/components-custom-components\"\r\n    icon = \"message\"\r\n    name = \"DataToTextComponent\"\r\n\r\n    inputs = [\r\n        DataInput(\r\n            name=\"data\",\r\n            display_name=\"Data\",\r\n            info=\"API response data (dict, JSON, or text).\",\r\n            value={},\r\n            tool_mode=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Text\", name=\"text\", method=\"extract_text\"),  # <- method name\r\n    ]\r\n\r\n    def extract_text(self) -> str:\r\n        data = self.data\r\n        if isinstance(data, dict):\r\n            if \"data\" in data and \"message\" in data[\"data\"]:\r\n                msg = data[\"data\"][\"message\"]\r\n            elif \"message\" in data:\r\n                msg = data[\"message\"]\r\n            else:\r\n                msg = str(data)\r\n        else:\r\n            msg = str(data)\r\n        return msg  # <- plain string\r\n"
              },
              "data": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "API response data (dict, JSON, or text).",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": {}
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "DataToTextComponent"
        },
        "dragging": false,
        "id": "CustomComponent-jNho1",
        "measured": {
          "height": 165,
          "width": 320
        },
        "position": {
          "x": 5958.944763592999,
          "y": -661.5489042976684
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomComponent-tj89C",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Extracts a message string from API response data and outputs as a Message object.",
            "display_name": "Data to Message",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "edited": true,
            "field_order": [
              "data"
            ],
            "frozen": false,
            "icon": "message",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "group_outputs": false,
                "hidden": null,
                "method": "build_message",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\r\nfrom langflow.io import DataInput, Output\r\nfrom langflow.schema.message import Message  # Import the Message class\r\n\r\nclass DataToMessageComponent(Component):\r\n    display_name = \"Data to Message\"\r\n    description = \"Extracts a message string from API response data and outputs as a Message object.\"\r\n    documentation: str = \"https://docs.langflow.org/components-custom-components\"\r\n    icon = \"message\"\r\n    name = \"DataToMessageComponent\"\r\n\r\n    inputs = [\r\n        DataInput(\r\n            name=\"data\",\r\n            display_name=\"Data\",\r\n            info=\"API response data (dict, JSON, or text).\",\r\n            value={},\r\n            tool_mode=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Message\", name=\"message\", method=\"build_message\"),\r\n    ]\r\n\r\n    def build_message(self) -> Message:\r\n        data = self.data\r\n        # Try to extract the message from common API response structures\r\n        if isinstance(data, dict):\r\n            if \"data\" in data and \"message\" in data[\"data\"]:\r\n                msg = data[\"data\"][\"message\"]\r\n            elif \"message\" in data:\r\n                msg = data[\"message\"]\r\n            else:\r\n                msg = str(data)\r\n        else:\r\n            msg = str(data)\r\n        return Message(content=msg)  # Output as a Message object\r\n"
              },
              "data": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "API response data (dict, JSON, or text).",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": {}
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "DataToMessageComponent"
        },
        "dragging": false,
        "id": "CustomComponent-tj89C",
        "measured": {
          "height": 181,
          "width": 320
        },
        "position": {
          "x": 5953.339501864105,
          "y": -921.909802573178
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextOutput-REnHF",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Sends text output via API.",
            "display_name": "Objective / Subjective",
            "documentation": "https://docs.langflow.org/components-io#text-output",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Sends text output via API.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-output\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Text to be passed as output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextOutput"
        },
        "dragging": false,
        "id": "TextOutput-REnHF",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": 1836.1521726382523,
          "y": 862.3969389444641
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-nyvXG",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get user text inputs.",
            "display_name": "Competitive Exam",
            "documentation": "https://docs.langflow.org/components-io#text-input",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get user text inputs.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-input\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-nyvXG",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": 1854.0640890779023,
          "y": 1233.8443201606788
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-CRkQY",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Any extra input if needed",
            "display_name": "Extra",
            "documentation": "https://docs.langflow.org/components-io#text-input",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get user text inputs.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-input\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-CRkQY",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": 1849.196250090607,
          "y": 1547.6708231602795
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": -557.2588081580982,
      "y": 133.27813790595854,
      "zoom": 0.3079919250594145
    }
  },
  "description": "Interactive Language Weaving.",
  "endpoint_name": null,
  "id": "94786ee6-d766-4e06-9ac1-4b321f845cf4",
  "is_component": false,
  "last_tested_version": "1.5.0",
  "name": "QNA",
  "tags": []
}